# The following build handles everything needed to bump the iTwin.js Core package versions
#
# There are currently 4 different types of version bumps:
#   - Nightly
#     - Move to the next `dev.x` version
#     - On master, occurs on a nightly basis, if there are changes to master since the last version bump
#     - On all other branches, can be triggered on-demand
#     - Can be run on any branch but normally used for `master` and `release/*` branches
#   - Release Candidate
#     - Only runs on the `master` branch
#     - Bumps the `dev.x` version on `master`, creates release branch and bumps `master` to the next minor dev version
#   - Minor
#     - Only runs on `release/*` branches
#     - Bumps the version to the next Minor version
#   - Patch
#     - Only runs on `release/*` branches
#     - Bumps the version to the next Patch version

parameters:
  - name: BumpType
    displayName: Version Bump Type
    type: string
    default: 'nightly'
    values:
    - nightly
    - minor
    - patch
    - releaseCandidate

trigger: none
pr: none
schedules:
- cron: "0 5 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master

pool:
  vmImage: ubuntu-latest

jobs:
  - job: Bump
    displayName: Bump Version
    steps:
    - checkout: self

    # When creating a minor release, the NextVersion.md need to be cleared and the contents placed into a {Version Number}.md file
    - ${{ if eq(parameters.BumpType, 'releaseCandidate') }}:
      - powershell: |
          $version = '4.5.0'

          # Add link to leftNav.md
          cat docs/changehistory/leftNav.md
          (Get-Content -Raw -Path docs/changehistory/leftNav.md) -replace "### Versions`n", "### Versions`n`n- [$version](./$version.md)`n" | Set-Content -Path docs/changehistory/leftNav.md

        failOnStderr: true
        displayName: leftNav.md edit

      - bash: |
          cat common/config/azure-pipelines/templates/gather-docs.yaml

          docsYamlPath="common/config/azure-pipelines/templates/gather-docs.yaml"
          releaseBranch="release"/4.5.x

          # delimiter
          IFS="."
          read -ra splitArray <<< "$releaseBranch"

          currentMinorVersion=${splitArray[1]}
          previousMinorVersion=$((currentMinorVersion - 1))

          # check if this release is major or minor version release
          # if minor version bump, use last recent minor version
          # if major version bump, `gather-docs.yaml` needs to be edited
          # manually to be the most recent previous major release
          # e.g. if this release is `release/5.0.x`, value in `gather-docs.yaml`
          # should be `release/4.<whatever_last_minor_release_version_was>.x`
          if [ $((previousMinorVersion)) -lt 0 ]
          then
            echo "This is is a major release. Edit \"gather-docs.yaml\" manually."
          else
            previousReleaseBranch="${releaseBranch/"$currentMinorVersion.x"/"$previousMinorVersion.x"}"
            escapedReleaseBranchName="${previousReleaseBranch//\//\\\/}"
            search="branchName: refs\/heads\/master"
            replace="branchName: refs\/heads\/"$escapedReleaseBranchName""
            echo "$search"
            echo "$replace"
            sed -i "s/$search/$replace/g" "$docsYamlPath"
            # git add "$docsYamlPath"
            git branch
            git status
            cat common/config/azure-pipelines/templates/gather-docs.yaml
            cat docs/changehistory/leftNav.md
          fi
        displayName: Update 'gather-docs.yaml' and commit to release branch
